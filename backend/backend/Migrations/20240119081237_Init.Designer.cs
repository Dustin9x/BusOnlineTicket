// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240119081237_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BusPlate")
                        .IsUnique();

                    b.HasIndex("BusTypeId");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusPlate = "59A1-55999",
                            BusTypeId = 1,
                            Note = "",
                            StationId = "1",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 2,
                            BusPlate = "59A1-55998",
                            BusTypeId = 2,
                            Note = "",
                            StationId = "2",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 3,
                            BusPlate = "59A1-55997",
                            BusTypeId = 3,
                            Note = "",
                            StationId = "3",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 4,
                            BusPlate = "59A1-55996",
                            BusTypeId = 4,
                            Note = "",
                            StationId = "4",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 5,
                            BusPlate = "59A1-55995",
                            BusTypeId = 1,
                            Note = "",
                            StationId = "5",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 6,
                            BusPlate = "59A1-55994",
                            BusTypeId = 2,
                            Note = "",
                            StationId = "1",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 7,
                            BusPlate = "59A1-55993",
                            BusTypeId = 3,
                            Note = "",
                            StationId = "2",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 8,
                            BusPlate = "59A1-55992",
                            BusTypeId = 4,
                            Note = "",
                            StationId = "3",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 9,
                            BusPlate = "59A1-55991",
                            BusTypeId = 1,
                            Note = "",
                            StationId = "4",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 10,
                            BusPlate = "59A1-55900",
                            BusTypeId = 2,
                            Note = "",
                            StationId = "5",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 11,
                            BusPlate = "59A1-55901",
                            BusTypeId = 3,
                            Note = "",
                            StationId = "1",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 12,
                            BusPlate = "59A1-55902",
                            BusTypeId = 4,
                            Note = "",
                            StationId = "2",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 13,
                            BusPlate = "59A1-55903",
                            BusTypeId = 1,
                            Note = "",
                            StationId = "3",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 14,
                            BusPlate = "59A1-55904",
                            BusTypeId = 2,
                            Note = "",
                            StationId = "4",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 15,
                            BusPlate = "59A1-55905",
                            BusTypeId = 3,
                            Note = "",
                            StationId = "5",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 16,
                            BusPlate = "59A1-55906",
                            BusTypeId = 4,
                            Note = "",
                            StationId = "1",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 17,
                            BusPlate = "59A1-55907",
                            BusTypeId = 1,
                            Note = "",
                            StationId = "2",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 18,
                            BusPlate = "59A1-55908",
                            BusTypeId = 2,
                            Note = "",
                            StationId = "3",
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("backend.Models.BusStation", b =>
                {
                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("BusId", "StationId");

                    b.HasIndex("StationId");

                    b.ToTable("BusStations");
                });

            modelBuilder.Entity("backend.Models.BusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BusTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Express",
                            NumberOfSeat = 50
                        },
                        new
                        {
                            Id = 2,
                            Name = "Luxury",
                            NumberOfSeat = 30
                        },
                        new
                        {
                            Id = 3,
                            Name = "Volvo Non-AC",
                            NumberOfSeat = 16
                        },
                        new
                        {
                            Id = 4,
                            Name = "Volvo AC",
                            NumberOfSeat = 9
                        });
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("YearOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isApprove")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "driver1.png",
                            DriverLicense = "234567",
                            Email = "driver1@phtv.com",
                            Enabled = true,
                            FullName = "Nguyen Van Toan",
                            NationalId = "2345678",
                            Password = "$2a$11$cSaVq25JW7MDcbz.xAtIhOaJPjJWAoVdCvxwT3z0n0DkNUXA6iGr6",
                            Phone = "090123456",
                            PlaceOfBirth = "Ho Chi Minh",
                            YearOfBirth = new DateTime(1995, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "driver2.png",
                            DriverLicense = "234567",
                            Email = "driver2@phtv.com",
                            Enabled = true,
                            FullName = "Le Huy Phu",
                            NationalId = "2345678",
                            Password = "$2a$11$47JEuYfYKvQzOBh6hWD9K.IV.45Dm8Cfx3j8IznunbDq1KVFl9AIW",
                            Phone = "090123456",
                            PlaceOfBirth = "Lam Dong",
                            YearOfBirth = new DateTime(1998, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "driver3.png",
                            DriverLicense = "234568",
                            Email = "driver3@phtv.com",
                            Enabled = true,
                            FullName = "Bui Quoc Viet",
                            NationalId = "2345679",
                            Password = "$2a$11$/o7GgljNt6Kn2gweX2N43uyt6LSYomwBn2PtqAwtW/oD.7d3Q81KO",
                            Phone = "090123457",
                            PlaceOfBirth = "Binh Thuam",
                            YearOfBirth = new DateTime(1993, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 4,
                            Avatar = "driver4.png",
                            DriverLicense = "234569",
                            Email = "driver4@phtv.com",
                            Enabled = true,
                            FullName = "Pham Huy Hoang",
                            NationalId = "2345670",
                            Password = "$2a$11$BL0xCCq1nVQdZMxjaS4vp.z/ahiPrC9Sh/wz9DlHmB1sHURGgE0Dq",
                            Phone = "090123458",
                            PlaceOfBirth = "Gia Lai",
                            YearOfBirth = new DateTime(1990, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 5,
                            Avatar = "driver5.png",
                            DriverLicense = "234560",
                            Email = "driver5@phtv.com",
                            Enabled = true,
                            FullName = "Le Huy Chuong",
                            NationalId = "2345671",
                            Password = "$2a$11$R2bO.MUwk8szMOEe2OFAuOLB5uUIrs9p2Vr9ofJ/6S.ShiL544GKG",
                            Phone = "090123459",
                            PlaceOfBirth = "Vung Tau",
                            YearOfBirth = new DateTime(1999, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 6,
                            Avatar = "driver6.png",
                            DriverLicense = "234561",
                            Email = "driver6@phtv.com",
                            Enabled = true,
                            FullName = "Le Thanh Thien",
                            NationalId = "2345672",
                            Password = "$2a$11$ctAEKWuwB1gskB83vaECTO8AiUE.m3kPkN6nrEV7KVMC6cxSp9gs6",
                            Phone = "090123450",
                            PlaceOfBirth = "Hà Nội",
                            YearOfBirth = new DateTime(1997, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 7,
                            Avatar = "driver7.png",
                            DriverLicense = "234562",
                            Email = "driver7@phtv.com",
                            Enabled = true,
                            FullName = "Le Dai Vi",
                            NationalId = "2345673",
                            Password = "$2a$11$upYgb/gGT1j7pCDsTEh52ONJvCIqkUrNuy3T3V20O4/UVHv6zh7dm",
                            Phone = "090123452",
                            PlaceOfBirth = "Ca Mau",
                            YearOfBirth = new DateTime(1996, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 8,
                            Avatar = "driver8.png",
                            DriverLicense = "234563",
                            Email = "driver8@phtv.com",
                            Enabled = true,
                            FullName = "Le Huy Phu",
                            NationalId = "2345674",
                            Password = "$2a$11$8/NTtkgJNc6H6VKmR1sGae3wiaSCfk6K7LSy7xqP0L7kGmhpJHMQS",
                            Phone = "090123451",
                            PlaceOfBirth = "Lam Dong",
                            YearOfBirth = new DateTime(1994, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 9,
                            Avatar = "driver9.png",
                            DriverLicense = "234564",
                            Email = "driver9@phtv.com",
                            Enabled = true,
                            FullName = "Le Huy Quan",
                            NationalId = "2345675",
                            Password = "$2a$11$ahCXPo3nXUn86IMpbiX2C.GctCOPWRAJK2sT37TOhgqWtONYGmCgO",
                            Phone = "090123453",
                            PlaceOfBirth = "Ben Tre",
                            YearOfBirth = new DateTime(2000, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        },
                        new
                        {
                            Id = 10,
                            Avatar = "driver10.png",
                            DriverLicense = "234565",
                            Email = "driver10@phtv.com",
                            Enabled = true,
                            FullName = "Le Huy Linh",
                            NationalId = "2345676",
                            Password = "$2a$11$r2fu058V4y4gVzaTpGwsYOUh7EypgKhFTHB3AJB919oR6H2.1trJ.",
                            Phone = "090123455",
                            PlaceOfBirth = "Dong Thap",
                            YearOfBirth = new DateTime(1978, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isApprove = false
                        });
                });

            modelBuilder.Entity("backend.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Ans: Booking a bus ticket online in India is easy with PHTV Bus. Simply enter the Leaving from (Origin City) -- Going to (destination city) details along with the date you wish to travel in the bus search option on the site. Within seconds you will be given a list of available running buses for your route. Select the bus that best suits you, then just follow the bus ticket booking process by selecting your seat, providing passenger details and completing the payment process. Upon successful booking confirmation, you will receive an e-ticket over email.",
                            Question = "Q. How do you do online bus reservation on PHTV Bus?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Ans: You do not need to create an account to view bus availability and seat availability. However, you need to register an account to be able to book tickets, this is to assist you in future transactions and support.",
                            Question = "Q. Do I need to create an account to book bus tickets on PHTV Bus?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Ans: We'll send you a e-ticket by email after your booking is confirmed. Simply board by presenting your e-ticket.",
                            Question = "Q. How do I get the bus ticket after booking?"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Ans: If you cancel before 2 days of Journey date then the whole money will be returned, if done one day before then 15% is debited from the total amount is returned, and if done on that day 30% is debited from the total amount is to be returned back.",
                            Question = "Q. Can I cancel my ticket and get a refund?"
                        });
                });

            modelBuilder.Entity("backend.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("backend.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "395/1Nam Kỳ Khởi Nghĩa P2 Q3",
                            Name = "Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 2,
                            Address = "126 Hai Bà Trưng P1 Q6",
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = 3,
                            Address = "35 Hồ Xuân Hương P9 Q1",
                            Name = "Đà Lạt"
                        },
                        new
                        {
                            Id = 4,
                            Address = "3A Đất Mũi Huyện Châu Thành , Tỉnh Cà Mau",
                            Name = "Cà Mau"
                        },
                        new
                        {
                            Id = 5,
                            Address = "39 Xã Nghĩa Lộ ,Huyện Cát Hải",
                            Name = "Hải Phòng"
                        });
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SeatsList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("isCancel")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("backend.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FromStationId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("int");

                    b.Property<int?>("ToStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FromStationId");

                    b.HasIndex("ToStationId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusId = 1,
                            DriverId = 1,
                            FinishTime = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 1,
                            Image = "image1.jpg",
                            StartTime = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 100,
                            ToStationId = 5
                        },
                        new
                        {
                            Id = 2,
                            BusId = 2,
                            DriverId = 2,
                            FinishTime = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 2,
                            Image = "image2.jpg",
                            StartTime = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 200,
                            ToStationId = 3
                        },
                        new
                        {
                            Id = 3,
                            BusId = 3,
                            DriverId = 3,
                            FinishTime = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 3,
                            Image = "image3.jpg",
                            StartTime = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 300,
                            ToStationId = 2
                        },
                        new
                        {
                            Id = 4,
                            BusId = 4,
                            DriverId = 4,
                            FinishTime = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 4,
                            Image = "image4.jpg",
                            StartTime = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 350,
                            ToStationId = 3
                        },
                        new
                        {
                            Id = 5,
                            BusId = 5,
                            DriverId = 5,
                            FinishTime = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 5,
                            Image = "image5.jpg",
                            StartTime = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 400,
                            ToStationId = 1
                        },
                        new
                        {
                            Id = 6,
                            BusId = 6,
                            DriverId = 6,
                            FinishTime = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 5,
                            Image = "image6.jpg",
                            StartTime = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 250,
                            ToStationId = 3
                        },
                        new
                        {
                            Id = 7,
                            BusId = 7,
                            DriverId = 7,
                            FinishTime = new DateTime(2024, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 4,
                            Image = "image7.jpg",
                            StartTime = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 150,
                            ToStationId = 2
                        },
                        new
                        {
                            Id = 8,
                            BusId = 8,
                            DriverId = 8,
                            FinishTime = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 3,
                            Image = "image8.jpg",
                            StartTime = new DateTime(2024, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 160,
                            ToStationId = 4
                        },
                        new
                        {
                            Id = 9,
                            BusId = 9,
                            DriverId = 9,
                            FinishTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 2,
                            Image = "image9.jpg",
                            StartTime = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 180,
                            ToStationId = 1
                        },
                        new
                        {
                            Id = 10,
                            BusId = 10,
                            DriverId = 10,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 1,
                            Image = "image10.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 190,
                            ToStationId = 4
                        },
                        new
                        {
                            Id = 11,
                            BusId = 1,
                            DriverId = 1,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 1,
                            Image = "image11.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 290,
                            ToStationId = 4
                        },
                        new
                        {
                            Id = 12,
                            BusId = 2,
                            DriverId = 2,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 5,
                            Image = "image12.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 340,
                            ToStationId = 4
                        },
                        new
                        {
                            Id = 13,
                            BusId = 3,
                            DriverId = 3,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 4,
                            Image = "image13.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 360,
                            ToStationId = 5
                        },
                        new
                        {
                            Id = 14,
                            BusId = 4,
                            DriverId = 4,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 3,
                            Image = "image14.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 280,
                            ToStationId = 1
                        },
                        new
                        {
                            Id = 15,
                            BusId = 5,
                            DriverId = 5,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 2,
                            Image = "image15.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 420,
                            ToStationId = 5
                        },
                        new
                        {
                            Id = 16,
                            BusId = 6,
                            DriverId = 6,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 1,
                            Image = "image16.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 340,
                            ToStationId = 3
                        },
                        new
                        {
                            Id = 17,
                            BusId = 7,
                            DriverId = 7,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 2,
                            Image = "image17.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 320,
                            ToStationId = 4
                        },
                        new
                        {
                            Id = 18,
                            BusId = 8,
                            DriverId = 8,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 3,
                            Image = "image18.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 210,
                            ToStationId = 5
                        },
                        new
                        {
                            Id = 19,
                            BusId = 9,
                            DriverId = 9,
                            FinishTime = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 4,
                            Image = "image19.jpg",
                            StartTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 270,
                            ToStationId = 1
                        },
                        new
                        {
                            Id = 20,
                            BusId = 10,
                            DriverId = 10,
                            FinishTime = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FromStationId = 5,
                            Image = "image20.jpg",
                            StartTime = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketPrice = 230,
                            ToStationId = 2
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@phtv.com",
                            Password = "$2a$11$2pqinnWvAAtnclLOEhHoXunaQS8KsUCpVUOKjqhoUG7fGfnUeYx5a",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "emp@phtv.com",
                            Password = "$2a$11$.FSRN2tUaohSGcaRvQ2lPObBvnCELqVqHy6zAyMhY2Ir4uL5E5Vh2",
                            Role = "Mod"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@phtv.com",
                            Password = "$2a$11$yVDoeY6g.utx8wu5X5DLA.MtklJJH53cpN2LDBTg0s0aR7OTGyn9K",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("backend.Models.Bus", b =>
                {
                    b.HasOne("backend.Models.BusType", "BusType")
                        .WithMany("Buses")
                        .HasForeignKey("BusTypeId");

                    b.Navigation("BusType");
                });

            modelBuilder.Entity("backend.Models.BusStation", b =>
                {
                    b.HasOne("backend.Models.Bus", null)
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Station", null)
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Seat", b =>
                {
                    b.HasOne("backend.Models.Trip", null)
                        .WithMany("Seats")
                        .HasForeignKey("TripId");
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.HasOne("backend.Models.Trip", "Trips")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Users")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trips");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("backend.Models.Trip", b =>
                {
                    b.HasOne("backend.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Station", "FromStation")
                        .WithMany()
                        .HasForeignKey("FromStationId");

                    b.HasOne("backend.Models.Station", "ToStation")
                        .WithMany()
                        .HasForeignKey("ToStationId");

                    b.Navigation("Bus");

                    b.Navigation("Driver");

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("backend.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("backend.Models.BusType", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("backend.Models.Trip", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
