// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240111144252_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BusPlate")
                        .IsUnique();

                    b.HasIndex("BusTypeId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("backend.Models.BusStation", b =>
                {
                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("BusId", "StationId");

                    b.HasIndex("StationId");

                    b.ToTable("BusStations");
                });

            modelBuilder.Entity("backend.Models.BusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BusTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Express",
                            NumberOfSeat = 50
                        },
                        new
                        {
                            Id = 2,
                            Name = "Luxury",
                            NumberOfSeat = 30
                        },
                        new
                        {
                            Id = 3,
                            Name = "Volvo Non-AC",
                            NumberOfSeat = 16
                        },
                        new
                        {
                            Id = 4,
                            Name = "Volvo AC",
                            NumberOfSeat = 9
                        });
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("YearOfBirth")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("backend.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsBook")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("backend.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Da Lat",
                            Name = "Đà Lạt"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ha Noi",
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Ho Chi Minh",
                            Name = "Hồ Chí Minh"
                        });
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("backend.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("int");

                    b.Property<int>("ToStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("backend.Models.TripStation", b =>
                {
                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StationId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripStations");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@phtv.com",
                            Password = "123",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "emp@phtv.com",
                            Password = "123",
                            Role = "Emp"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@phtv.com",
                            Password = "123",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("backend.Models.Bus", b =>
                {
                    b.HasOne("backend.Models.BusType", "BusType")
                        .WithMany("Buses")
                        .HasForeignKey("BusTypeId");

                    b.Navigation("BusType");
                });

            modelBuilder.Entity("backend.Models.BusStation", b =>
                {
                    b.HasOne("backend.Models.Bus", null)
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Station", null)
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Seat", b =>
                {
                    b.HasOne("backend.Models.Ticket", null)
                        .WithMany("Seats")
                        .HasForeignKey("TicketId");

                    b.HasOne("backend.Models.Trip", null)
                        .WithOne("Seats")
                        .HasForeignKey("backend.Models.Seat", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.HasOne("backend.Models.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Trip", b =>
                {
                    b.HasOne("backend.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("backend.Models.TripStation", b =>
                {
                    b.HasOne("backend.Models.Station", "Station")
                        .WithMany("TripStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Trip", "Trip")
                        .WithMany("TripStations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("backend.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("backend.Models.BusType", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("backend.Models.Station", b =>
                {
                    b.Navigation("TripStations");
                });

            modelBuilder.Entity("backend.Models.Ticket", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("backend.Models.Trip", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("TripStations");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
